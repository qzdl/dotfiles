:PROPERTIES:
:ID:       53b915d9-5347-4878-832c-713a45b5be75
:END:
#+title: system configuration
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

[[id:2e1b78ef-de6f-4af9-8a89-5d5ffe12a3ba][My]] system configurations for [[id:959414da-620e-473b-80fc-1918fb459c02][GNU Guix]], compiled by [[id:953e0494-76b3-4ab7-bfe6-944e178b59dd][GNU Emacs]], deployed by [[id:884406e4-0851-4dc3-a6d3-cfe1c9fa1b2b][GNU
Stow]].

involves some [[id:f43fa203-367c-44a9-9762-e623f4ae41d1][system administration]], [[id:5f896cd4-d7b8-44d2-a40d-ccdae1b80c33][programming]], and rice.

inspired by [[https://config.daviwil.com/systems][System Configuration with Guix - config.daviwil.com]]

* configuration
** systems
*** explanation
with a simple separation of concerns, in attempts to eliminate redundancy:
- base; minimum common denominators    (vc, emacs, networking, vpn, ssh, ...)
- minimal; for a small board (pi, ...) (base, specific things, ...)
- clean; for regular use               (base, X11, web browser, ...)

created using modules, as described:
- [[https://www.gnu.org/software/guile/manual/html_node/Modules.html#Modules][Modules (Guile Reference Manual)]]
- [[https://guix.gnu.org/en/manual/en/html_node/Package-Modules.html#Package-Modules][Package Modules (GNU Guix Reference Manual)]]
- [[https://guix.gnu.org/en/manual/en/html_node/Defining-Packages.html#Defining-Packages][Defining Packages (GNU Guix Reference Manual)]]
- I am yet to understand how ~module~ relates to ~define[-public]~, and how ~packages~
  relate to ~modules~.
  - will #:use-module (gnu packages emacs) install a package ~emacs~? or make the build/sub available?
  - how can i build packages for an installation?
  - how does a manifest relate to [ module(gnu package emacs)-> packages(emacs-no-x-toolkite) || manifest emacs-no-x-toolkit@28.1 ] ?

*** base-system;    .config/guix/systems/base-system.scm :file:
:PROPERTIES:
:ID:       61f53bfc-e34f-42ac-9dea-6f5e57f9a056
:ROAM_ALIASES: "guix base system"
:END:
***** base-system
#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(define-module (base-system)
  #:use-module (gnu)
  #:use-module (srfi srfi-1) ; scheme extensions per https://srfi.schemers.org/srfi-159/srfi-159.html
  #:use-module (gnu system nss) ;; network security service; appdev ssl,tls, etc
  #:use-module (gnu services docker)
  #:use-module (gnu services networking)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages package-management)
  #:use-module (nongnu packages linux)
  #:use-module (nongnu system linux-initrd))
#+end_src
***** base-service-modules
#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(use-package-modules certs)
(use-package-modules shells)

#+end_src
***** base-operating-system
:: [[https://guix.gnu.org/en/manual/en/html_node/operating_002dsystem-Reference.html#operating_002dsystem-Reference][operating-system Reference (GNU Guix Reference Manual)]]
:: [[https://guix.gnu.org/en/manual/en/html_node/Using-the-Configuration-System.html][Using the Configuration System (GNU Guix Reference Manual)]]

timezone[fn:1], locale[fn:2], default hostname etc

initrd[fn:3] 'inital ram disk'; for the bootloader to invoke ram
:: [[https://guix.gnu.org/en/manual/en/html_node/Initial-RAM-Disk.html][Initial RAM Disk (GNU Guix Reference Manual)]]
- the kernel loads 'compiled-in' drivers
- temporary filesystem
- init script
  - to load 'additional modules' (for the kernel)
    - ~operating-system -> initrd-modules~ in guix

based on our initrd config, we can even 'boot-to-Guile' with the ~--repl~ flag, to land in a repl in the initial ram disk. wild. [fn:5]

we are instructing initrd to populate with proprietary microcode[fn:4] ("ucode")
for processors.

I'm not happy about this blob usage AT ALL, but it's the cost of using non-free
hardware. exercise limited trust in these machines.

if running on a removable drive, it may be worth adding both amd
and intel ucode images to the bootloader config in initrd.

:: [[https://guix.gnu.org/en/manual/en/html_node/Keyboard-Layout.html][Keyboard Layout (GNU Guix Reference Manual)]]
- 'model' comes from ~share/X11/xkb~ of package ~xkeyboard-config~
#+begin_src scheme :tangle .config/guix/systems/base-system.scm
(define-public base-operating-system
  (operating-system
   (host-name "unconf")
   (timezone "Europe/Berlin")
   (locale "en_US.UTF-8")

   ;; nonfree kernel
   (kernel linux)
   (firmware (list linux-firmware))
   (initrd microcode-initrd)

   ;; disable ipv6 for safe vpn usage; we just aren't there yet :/
   (kernel-arguments '("quiet" "ipv6.disable=1"))

   ;; kernel layout, not necessarily X layout
   (keyboard-layout (keyboard-layout "us" "altgr-intl" #:model "thinkpad"))

   ;; UEFI+GRUB
   (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (target "/boot/efi")
                (keyboard-layout keyboard-layout)))

   ;; base user
   (users (cons (user-account
                 (name "samuel")
                 (comment "it me")
                 (group "users")
                 (home-directory "/home/samuel/")
                 (supplementary-groups '("wheel"
                                         "netdev"
                                         "kvm"
                                         "tty"
                                         "input"
                                         ;"docker"
                                         )))
                %base-user-accounts))

   ;; OVERWRITE THIS WHEN INHERITING
   ;;   AN ARTIFACT OF INCIDENTAL COMPLEXITY IN GUIX
   (file-systems (cons*
                  (file-system
                   (mount-point "/tmp")
                   (device "none")
                   (type "tmpfs")
                   (check? #f))
                  %base-file-systems))

   (packages (append (list
                      git
                      stow
                      emacs
                      vim
                      ;;openvpn
                      nss-certs
                      ;; fs utils
                      ;;gvfs
                      ;;fuse-exfat
                      ;;exfat-utils
                      )
                     %base-packages))

   ;; Use the "desktop" services, which include the X11 log-in service,
   ;; networking with NetworkManager, and more
   (services (append (list (service docker-service-type)
                           (extra-special-file "/usr/bin/env"
                                               (file-append coreutils "/bin/env"))
                           ;(service thermald-service-type)
                           )
                     %base-services)))) ;; TODO INSPECT %base-services
#+end_src

*** tiny-system;    .config/guix/systems/tiny-system.scm :file:
:PROPERTIES:
:ID:       2c540af7-a823-4ce8-b8ea-eee0372749bc
:ROAM_ALIASES: "guix tiny system"
:END:

consumes [[id:61f53bfc-e34f-42ac-9dea-6f5e57f9a056][guix base system]]
*** minimal-system; .config/guix/systems/minimal-system.scm :file:
:PROPERTIES:
:ID:       1134d479-ddd6-4963-a001-aa84f471db49
:ROAM_ALIASES: "guix minimal system"
:END:
things for 'full systems' -> consumes [[id:61f53bfc-e34f-42ac-9dea-6f5e57f9a056][guix base system]]
***** minimal-system
#+begin_src scheme :tangle .config/guix/systems/minimal-system.scm
(define-module (minimal-system)
  #:use-module (base-system)
  #:use-module (gnu)
  #:use-module (srfi srfi-1)
  #:use-module (gnu services pm)             ;; clipboard menu
  #:use-module (gnu services cups)           ;; printing
  #:use-module (gnu services desktop)        ;; desktop services (blote)
  #:use-module (gnu services docker)
  #:use-module (gnu services virtualization) ;; VMs
  #:use-module (gnu packages xorg)           ;; graphical display
  #:use-module (gnu packages gnuzilla)       ;; GNU mozilla suite
  #:use-module (gnu packages audio)          ;;
  #:use-module (gnu packages pulseaudio)     ;; audio daemon
  #:use-module (gnu packages wm)             ;; lots of wm options (blote)
  #:use-module (gnu packages cups)           ;; printing
  #:use-module (gnu packages mtools)         ;; interact with ms disks
  #:use-module (gnu packages gtk)            ;; gnome stuff  (blote)
  #:use-module (gnu packages web-browsers))  ;; web browsers (blote)
#+end_src
***** minimal-service-modules
#+begin_src scheme :tangle .config/guix/systems/minimal-system.scm
(use-service-modules desktop xorg)
#+end_src
***** rules & resources
****** udev-rule-backlight
#+begin_src scheme :tangle .config/guix/systems/minimal-system.scm
;; Allow members of the "video" group to change the screen brightness.
(define %udev-rule-backlight
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

#+end_src

#+RESULTS:
****** xorg-libinput
just a better control surface
#+begin_src scheme :tangle .config/guix/systems/minimal-system.scm
(define %xorg-libinput-config
  "Section \"InputClass\"
  Identifier \"Touchpads\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsTouchpad \"on\"

  Option \"Tapping\" \"on\"
  Option \"TappingDrag\" \"on\"
  Option \"DisableWhileTyping\" \"on\"
  Option \"MiddleEmulation\" \"on\"
  Option \"ScrollMethod\" \"twofinger\"
  Option \"Natural Scrolling\" \"on\"
EndSection
Section \"InputClass\"
  Identifier \"Keyboards\"
  Driver \"libinput\"
  MatchDevicePath \"/dev/input/event*\"
  MatchIsKeyboard \"on\"
EndSection
")
#+end_src
****** desktop services; power, udev, vpn
#+begin_src scheme :tangle .config/guix/systems/minimal-system.scm
(define %my-desktop-services
  (modify-services %desktop-services
   (elogind-service-type
    config => (elogind-configuration (inherit config)
                           (handle-lid-switch-external-power 'suspend)))
   (udev-service-type
    config => (udev-configuration (inherit config)
                                  (rules (cons %udev-rule-backlight
                                               (udev-configuration-rules config)))))
   ;; (network-manager-service-type
   ;;  config => (network-manager-configuration (inherit config)
   ;;                                           (vpn-plugins (list     network-manager-openvpn))))
  ))
#+end_src

***** minimal-operating-system
- [[https://guix.gnu.org/en/manual/en/html_node/Desktop-Services.html#index-_0025desktop_002dservices][Desktop Services (GNU Guix Reference Manual)]]
#+begin_src scheme :tangle .config/guix/systems/minimal-system.scm
(define-public minimal-operating-system
  (operating-system
   (inherit base-operating-system)

   (services (cons* ;; virtualisation
                    (service libvirt-service-type
                             (libvirt-configuration
                              (unix-sock-group "libvirt")
                              (tls-port "16555")))
                    (service docker-service-type)
                    ;; bluetooth
                    (bluetooth-service #:auto-enable? #t)
                    ;; X11
                    ;; (service slim-service-type
                    ;;    (slim-configuration
                    ;;     (xorg-configuration
                    ;;      (xorg-configuration
                    ;;       (keyboard-layout
                    ;;        (operating-system-keyboard-layout base-operating-system)
                    ;;        (extra-config (list %xorg-libinput-config)))))))
                    ;;
                    ;;(operating-system-services base-operating-system)
                    ;;
                    (remove (lambda (service)
                        (eq? (service-kind service) gdm-service-type))
                     %my-desktop-services)))

   (packages
    (append (list pulseaudio)
                  ;bluez
                  ;bluez-alsa
                  ;tlp
                  ;;
                  ;fx86-input-libinput
                  ;; wms
                  ;dmenu emacs-exwm emacs-desktop-environment
            (operating-system-packages base-operating-system)))))
#+end_src
***** TODO xorg service config
***** TODO xorg screentearing config
***** TODO fix error on (operating-system-services base-operating-system)

** debugging
guix repl -L ~/dotfiles/.config/guix/systems/

** devices
*** qzdl :@home:
consuming [[id:1134d479-ddd6-4963-a001-aa84f471db49][guix minimal system]]
*** donutrust :@work:
my thinkpad x1 carbon; a work machine. consumes [[id:1134d479-ddd6-4963-a001-aa84f471db49][guix minimal system]]




#+begin_src scheme :tangle .config/guix/systems/donutrust-system.scm
;; GENERATED BY ~/dotfiles/systems.org

(define-module (donutrust)
 #:use-module (minimal-system)
 #:use-module (gnu)
 #:use-module (nongnu packages linux))

(operating-system
 (inherit minimal-operating-system)
 (host-name "donutrust")

 (firmware (list linux-firmware sof-firmware))

 (mapped-devices
  (list (mapped-device
         (source (uuid "c9042f21-04bd-48ff-9295-5e314f1d4b37"))
         (target "sys-root")
         (type luks-device-mapping))))

 (file-systems (cons*
                (file-system
                 (device (file-system-label "sys-root"))
                 (mount-point "/")
                 (type "ext4")
                 (dependencies mapped-devices))
                (file-system
                 (device "/dev/nvme0n1p1")
                 (mount-point "/boot/efi")
                 (type "vfat"))
                %base-file-systems)))
#+end_src
*** reconf
#+begin_src bash
sudo -E guix system -L ~/.config/guix/systems reconfigure ~/.config/guix/systems/donutrust-system.scm
#+end_src

#+RESULTS:

*** cleanpi

** installation image
:: https://gitlab.com/nonguix/nonguix/blob/master/nongnu/system/install.scm

*** .config/guix/systems/install.scm
#+begin_src scheme :tangle .config/guix/systems/install.scm
;;; Copyright © 2019 Alex Griffin <a@ajgrf.com>
;;; Copyright © 2019 Pierre Neidhardt <mail@ambrevar.xyz>
;;;
;;; This program is free software: you can redistribute it and/or modify

;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Generate a bootable image (e.g. for USB sticks, etc.) with:
;; <exec-shell-cmd "guix system disk-image nongnu/system/install.scm">

(define-module (nongnu system install)
  #:use-module (gnu system)
  #:use-module (gnu system install)
  #:use-module (nongnu packages linux)
  ;; #:use-module (base-system)
  ;; #:use-module (tiny-system)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages package-management)
  #:export (installation-os-nonfree))

(define installation-os-nonfree
  (operating-system
    (inherit installation-os)
    (kernel linux)
    (firmware (list linux-firmware))
    (kernel-arguments '("net.ifnames=0"))

    (packages (append (list git curl stow vim emacs-no-x-toolkit)
                      ;; (operating-system-packages base-operating-system)
                      (operating-system-packages installation-os)))))

installation-os-nonfree
#+end_src

** packages
:: .config/guix/packages
*** v4l2loopback-linux-module
virtual video devices; hijack the webcam feed, or stream an application though loopback
*** mtools :core:
:: [[https://www.gnu.org/software/mtools/][Mtools - GNU Project - Free Software Foundation]]
*** dunst
:: https://dunst-project.org/
:: https://dunst-project.org/documentation

**** notify-emacs.sh
a script from u/deaddyfreddy, from
https://reddit.com/r/emacs/comments/klsxwv/enabling_desktop_notifications_with_dunst_emacs/ghb17s2

#+begin_src sh :tangle .config/dunst/notify-emacs.sh
#!/bin/sh

APPNAME="$1"
SUMMARY="$2"
BODY="$3"
ICON="$4"
URGENCY="$5"
emacsclient -n --eval "(message \"${APPNAME}/${SUMMARY}: $BODY\")"
#+end_src

*** gnuzilla
[[id:186a4daf-02ea-445b-9469-9909a5d7fb05][firefox]]
*** python-3.6.4
#+begin_src scheme :tangle .config/guix/packages-python-3.6.4.scm
(define-public python-3.6
  (package (inherit python-2)
    (version "3.6.4")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://www.python.org/ftp/python/"
                                  version "/Python-" version ".tar.xz"))
              (patches (search-patches
                        "python-fix-tests.patch"
                        "python-3-fix-tests.patch"
                        "python-3-deterministic-build-info.patch"
                        "python-3-search-paths.patch"))
              (patch-flags '("-p0"))
              (sha256
               (base32
                "1fna7g8jxzl4kd2pqmmqhva5724c5m920x3fsrpsgskaylmr76qm"))
              (snippet
               '(begin
                  (for-each delete-file
                            '("Lib/ctypes/test/test_structures.py" ; fails on aarch64
                              "Lib/ctypes/test/test_win32.py" ; fails on aarch64
                              "Lib/test/test_fcntl.py")) ; fails on aarch64
                  #t))))
    ;; (arguments
    ;;  (substitute-keyword-arguments (package-arguments python-2)
    ;;    ((#:tests? _) #t)
    ;;    ((#:phases phases)
    ;;     `(modify-phases ,phases
    ;;        (add-after 'unpack 'patch-timestamp-for-pyc-files
    ;;          (lambda (_)
    ;;            ;; We set DETERMINISTIC_BUILD to only override the mtime when
    ;;            ;; building with Guix, lest we break auto-compilation in
    ;;            ;; environments.
    ;;            (setenv "DETERMINISTIC_BUILD" "1")
    ;;            (substitute* "Lib/py_compile.py"
    ;;              (("source_stats\\['mtime'\\]")
    ;;               "(1 if 'DETERMINISTIC_BUILD' in os.environ else source_stats['mtime'])"))

    ;;            ;; Use deterministic hashes for strings, bytes, and datetime
    ;;            ;; objects.
    ;;            (setenv "PYTHONHASHSEED" "0")

    ;;            ;; Reset mtime when validating bytecode header.
    ;;            (substitute* "Lib/importlib/_bootstrap_external.py"
    ;;              (("source_mtime = int\\(source_stats\\['mtime'\\]\\)")
    ;;               "source_mtime = 1"))
    ;;            #t))
    ;;        ;; These tests fail because of our change to the bytecode
    ;;        ;; validation.  They fail because expected exceptions do not get
    ;;        ;; thrown.  This seems to be no problem.
    ;;        (add-after 'unpack 'disable-broken-bytecode-tests
    ;;          (lambda
    ;;            (substitute* "Lib/test/test_importlib/source/test_file_loader.py"
    ;;              (("test_bad_marshal")
    ;;               "disable_test_bad_marshal")
    ;;              (("test_no_marshal")
    ;;               "disable_test_no_marshal")
    ;;              (("test_non_code_marshal")
    ;;               "disable_test_non_code_marshal"))
    ;;            #t))
    ;;        ;; Unset DETERMINISTIC_BUILD to allow for tests that check that
    ;;        ;; stale pyc files are rebuilt.
    ;;        (add-before 'check 'allow-non-deterministic-compilation
    ;;          (lambda _ (unsetenv "DETERMINISTIC_BUILD") #t))
    ;;        ;; We need to rebuild all pyc files for three different
    ;;        ;; optimization levels to replace all files that were not built
    ;;        ;; deterministically.

    ;;        ;; FIXME: Without this phase we have close to 2000 files that
    ;;        ;; differ across different builds of this package.  With this phase
    ;;        ;; there are about 500 files left that differ.
    ;;        (add-after 'install 'rebuild-bytecode
    ;;          (lambda* (#:key outputs #:allow-other-keys)
    ;;            (setenv "DETERMINISTIC_BUILD" "1")
    ;;            (let ((out (assoc-ref outputs "out")))
    ;;              (for-each
    ;;               (lambda (opt)
    ;;                 (format #t "Compiling with optimization level: ~a\n"
    ;;                         (if (null? opt) "none" (car opt)))
    ;;                 (for-each (lambda (file)
    ;;                             (apply invoke
    ;;                                    `(,(string-append out "/bin/python3")
    ;;                                      ,@opt
    ;;                                      "-m" "compileall"
    ;;                                      "-f" ; force rebuild
    ;;                                      ;; Don't build lib2to3, because it's Python 2 code.
    ;;                                      ;; Also don't build obviously broken test code.
    ;;                                      "-x" "(lib2to3|test/bad.*)"
    ;;                                      ,file)))
    ;;                           (find-files out "\\.py$")))
    ;;               (list '() '("-O") '("-OO"))))))))))

    ;; (native-search-paths
    ;;  (list (search-path-specification
    ;;         (variable "PYTHONPATH")
    ;;         (files (list (string-append "lib/python"
    ;;                                     (version-major+minor version)
    ;;                                     "/site-packages"))))))
))
#+end_src

#+RESULTS:
*** mvdan.cc/sh
:: [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-import.html][Invoking guix import (GNU Guix Reference Manual)]]
:: [[https://github.com/mvdan/sh][GitHub: mvdan/sh]]
:: [[https://pkg.go.dev/mvdan.cc/sh/v3][sh · pkg.go.dev]]

#+begin_src scheme :tangle .config/guix/packages/go-mvdan-sh.scm
;; <2021-08-11 Wed 13:33> `guix import go mvdan.cc/sh'
(use-modules (guix packages)
             (guix git-download)
             (guix build-system go)
             (guix licenses))



  (package
    (name "go-mvdan-cc-sh")
    (version "2.6.4+incompatible")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mvdan/sh")
               (commit (go-version->git-ref version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "1jifac0fi0sz6wzdgvk6s9xwpkdng2hj63ldbaral8n2j9km17hh"))))
    (build-system go-build-system)
    (arguments '(#:import-path "mvdan.cc/sh"))
    (home-page "https://mvdan.cc/sh")
    (synopsis "sh")
    (description
      "This package provides a shell parser, formatter and interpreter.  Supports @url{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html,POSIX Shell}, @url{https://www.gnu.org/software/bash/,Bash} and
@url{https://www.mirbsd.org/mksh.htm,mksh}.  Requires Go 1.10 or later.")
    (license bsd-3))

;;go-mvdan-cc-sh
#+end_src
**

*** ricing
**** python-pywal
**** imagemagick

** bash/shell
*** aliases; .config/aliasrc :file:
#+begin_src bash :tangle .config/aliasrc
alias yt="youtube-dl --add-metadata -i -o '%(upload_date)s-%(title)s.%(ext)s'" \
      yta="yt -x -f bestaudio/best" \
      ls='ls -p --color=auto' \
      ll='ls -lah' \
      grep='grep --color=auto' \
      g='guix' \
      gg='git' \
      h='sudo herd' \
      res='source ~/.bashrc'
      xo="xdg-open"

shdl() { curl -O $(curl -s http://sci-hub.tw/"$@" | grep location.href | grep -o http.*pdf); }
se() { du -a ~/.scripts/* ~/.config/* | awk '{print $2}' | fzf | xargs -r $EDITOR; }
sv() { vcopy "$(du -a ~/.scripts/* ~/.config/* | awk '{print $2}' | fzf)"; }
sb() { echo $1 | sudo tee /sys/class/backlight/intel_backlight/brightness; }
#+end_src

*** .bashrc :file:
**** exports
export 'SHELL' to child processes

'screen' will honor it and otherwise use ~/bin/sh~
#+begin_src bash :tangle .bashrc
export SHELL
#+end_src
**** sources
references to other files
***** include env vars in ssh sessions
#+begin_src bash :tangle .bashrc
if [[ $- != *i* ]]
then
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in "ssh host command"), source
    # /etc/profile so we get PATH and other essential variables.
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi
#+end_src
***** reference other files
#+begin_src bash :tangle .bashrc
# Source the system-wide file.

source /etc/bashrc
source ./.config/aliasrc
source ~/ns.sh # pyenv
#+end_src

**** vterm
:: [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][GitHub - akermu/emacs-libvterm: Emacs libvterm integration]]
a terminal in emacs

***** filter input for vterm compatibility
#+begin_src bash :tangle .bashrc
# emacs-vterm display helper
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+end_src
***** clear scrollback
:: https://github.com/akermu/emacs-libvterm#vterm-clear-scrollback
#+begin_src bash :tangle .bashrc
# emacs-vterm: clear scrollback
if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
    function clear(){
        vterm_printf "51;Evterm-clear-scrollback";
        tput clear;
    }
fi
#+end_src
**** colouring
:: [[https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit][ANSI escape code - Wikipedia]]
# ESC[ 38;2;⟨r⟩;⟨g⟩;⟨b⟩ m Select RGB foreground color
# ESC[ 48;2;⟨r⟩;⟨g⟩;⟨b⟩ m Select RGB background color
**** TODO PS1
#+name: current PS1
#+begin_example
[18:41] [samuel : donutrust] [/home/samuel/dotfiles]↝
∴
#+end_example


#+begin_src bash :tangle .bashrc
# VTERM PS1
vterm_prompt_end(){
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
}
# Adjust the prompt depending on whether we're in 'guix environment'.
if [ -n "$GUIX_ENVIRONMENT" ]
then
    GUIX_ENV_PS1='[env]'
else
    GUIX_ENV_PS1=''
fi

PS1="\n[\A] [\u : \h] [\w]$(echo -e '\U219D')"
PS1="$PS1\n$GUIX_ENV_PS1$(echo -e '\U2234') "
PS1=$PS1'\[$(vterm_prompt_end)\]'
#+end_src

** channels
:: [[https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels][Channels (GNU Guix Reference Manual)]]
- [[https://gitlab.com/nonguix/nonguix][Nonguix / nonguix · GitLab]]; nonfree linux-kernel for wifi drivers

*** .config/guix/channels.scm :file:
#+begin_src scheme :tangle .config/guix/channels.scm
;; GENERATED BY ~/dotfiles/system.org
(list
 (channel
  (name 'guix)
  (url "https://git.savannah.gnu.org/git/guix.git"))
 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix"))
 ;; a great effort from infra hpc
 ;;(channel
 ;; (name 'guix-past)
 ;; (url "https://gitlab.inria.fr/guix-hpc/guix-past")
 ;; (introduction
 ;;  (make-channel-introduction
 ;;   "0c119db2ea86a389769f4d2b9c6f5c41c027e336"
 ;;   (openpgp-fingerprint
 ;;    "3CE4 6455 8A84 FDC6 9DB4  0CFB 090B 1199 3D9A EBB5"))))
)
  #+end_src

  #+RESULTS:
** HACK inferiors
#+begin_src scheme
(use-modules (guix inferior)
             (guix)
             (srfi srfi-1))

(define pychannel
  (list (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (commit "5c798ca71dcd009896654da7d6a1f8942c6f3c50"))))

(define inferior
  (inferior-for-channels pychannel))

(packages->manifest
 (list (first (lookup-inferior-packages inferior "python"))))
#+end_src

#+RESULTS:

** TODO emacs config as-a-package
basically, to be able to update my emacs config with ~guix pull~
*** python runtime in docker
#+begin_src bash :tangle .emacs.d/docker-pyshell.sh
docker run -it -v /tmp:/tmp -v $HOME/git ufoym/deepo python3
#+end_src

* compilation
** tangle-dotfiles.el
#+begin_src emacs-lisp :tangle .doom.d/tangle-dotfiles.el
(require 'org)

(defun qz/tangle-sys ()
  (interactive)
;; Don't ask when evaluating code blocks
(setq-local org-confirm-babel-evaluate nil)

(let* ((dotfiles-path (expand-file-name "~/dotfiles/"))
       (org-files (directory-files dotfiles-path nil "\\.org$")))

  (defun dw/tangle-org-file (org-file)
    (message "\n\033[1;32mUpdating %s\033[0m\n" org-file)
    (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))

  ;; Tangle Systems.org first
  (dw/tangle-org-file "systems.org")

  (dolist (org-file org-files)
    (unless (member org-file '("README.org" "systems.org"))
      (dw/tangle-org-file org-file)))))

(qz/tangle-sys)
#+end_src

#+RESULTS:

* Footnotes
[fn:5] [[https://www.gnu.org/software/guile/manual/html_node/Using-Guile-Interactively.html#Using-Guile-Interactively][Using Guile Interactively (Guile Reference Manual)]]
[fn:4] [[https://wiki.archlinux.org/title/microcode][Microcode - ArchWiki]]

[fn:3] [[https://www.kernel.org/doc/html/latest/admin-guide/initrd.html][Using the initial RAM disk (initrd) — The Linux Kernel documentation]]
[fn:2] [[https://www.tecmint.com/set-system-locales-in-linux/][How to Change or Set System Locales in Linux]]
- get: ~localectl~
- set: ~sudo localectl set-blocale LANG=en_US.UTF_8~
[fn:1] check the existing timezone with the following ([[https://www.tecmint.com/check-linux-timezone/][How to Check Timezone in Linux]])
  #+begin_src bash
  timedatectl | grep -i "time zone"
  #+end_src
